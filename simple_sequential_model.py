# -*- coding: utf-8 -*-
"""simple_sequential_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AsS1rJfe71FpdDfc0WDPVU-dlsuxKESM
"""

#importing all the required libraries. We use the tensorflow and keras to build and train this model.
#Use the Numpy to create the dataset for train the model

import tensorflow as tf
from tensorflow import keras
import numpy as np

# BUILDING THE MODE
#Bulding up the nural network model using Keras this is a Sequential mode with one single Layer.
#We use the Dense to create the layers for the model. 
#Unit defines the number of node we have and the input_shape define how many inputs are provided

model = tf.keras.Sequential([keras.layers.Dense(units=1, input_shape=[1])])

#COMPILE THE MODEL
#Now we have the model builded and we need to compile it to feed data.
#The model will predict a value and use loss function to calculate the loss and use the  optimizer to optimize the prediction
#we define the loss and optimizer to compile object

model.compile(optimizer='sgd', loss='mean_squared_error')

# DATASET CREATION
#Creating our training data set.
#We have an X and Corresponding Y the model will learn the relation between X and Y

xs = np.array([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0], dtype=float)
ys = np.array([-2.0, 1.0, 4.0, 7.0, 10.0, 13.0], dtype=float)

# TRAINING OF THE MODEL
#fitFunction fit the X to Y and predict the output then it use optimizer to optimize the prediction and continues this process for 500 times
#We can define the number of times to optimize as Epochs

model.fit(xs, ys, epochs=500)

# TESTING THE MODEL
#now we have the model build and trained so we can perform some tests on it. 
#Using the predict function we can predict the Y corresponding to X

print(model.predict([12.8]))